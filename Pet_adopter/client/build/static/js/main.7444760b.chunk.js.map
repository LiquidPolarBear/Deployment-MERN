{"version":3,"sources":["components/PetTable.js","views/Home.js","views/PetDetails.js","components/PetAddFields.js","views/NewPet.js","components/PetEditFields.js","views/EditPet.js","App.js","serviceWorker.js","index.js"],"names":["props","removeFromDom","useState","setPet","useEffect","axios","get","then","res","data","pet","map","i","key","name","type","to","_id","setLoaded","console","log","catch","err","PetTable","petId","filter","id","onClick","e","delete","navigate","description","skill1","skill2","skill3","errors","setErrors","setName","setType","setDescription","setSkill1","setSkill2","setSkill3","onSubmit","preventDefault","post","errorResponse","response","errorArr","Object","keys","push","message","index","value","onChange","target","PetAddFields","put","updatePet","PetEditFields","App","className","Home","path","PetDetails","NewPet","EditPet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.7444760b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios'\r\nimport {Link} from '@reach/router'\r\nimport PetDeleteButton from './PetDeleteButton';\r\nexport default (props) => {\r\n\r\nconst {removeFromDom} = props;\r\nconst [pet, setPet] = useState();\r\nuseEffect(() => {\r\n    axios.get('http://localhost:8000/api/allpets')\r\n        .then(res => setPet(res.data));\r\n}, [])\r\n\r\n\r\n\r\n    return (\r\n        <table>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Actions</th>\r\n            </tr>\r\n            {props.pet.map((pet, i)=>{\r\n                return <tr key={i}>\r\n                <td>{pet.name}</td>\r\n                <td>{pet.type}</td>\r\n                <td><Link to={`/pets/${pet._id}`}>Details</Link> <Link to={`/pets/${pet._id}/edit`}>Edit</Link>\r\n                {/* <PetDeleteButton petId={pet._id} successCallback={()=>removeFromDom(pet._id)}/> */}\r\n                </td>\r\n            </tr>\r\n            })}\r\n        </table>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\nimport {Link} from '@reach/router'\r\nimport PetTable from '../components/PetTable';\r\n\r\nexport default () => {\r\n    const [pet, setPet] = useState([])\r\n    const [loaded, setLoaded] = useState(false);\r\n    \r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/allpets')\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setPet(res.data);\r\n            setLoaded(true);\r\n        })\r\n        .catch(err => console.log(err.data))\r\n    }, []);\r\n\r\n    const removeFromDom = petId => {\r\n        setPet(pet.filter(pet => pet._id !== petId))\r\n        console.log(\"Remove from dom\")\r\n        console.log(petId)\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <Link to=\"pets/new\">add a pet to the shelter</Link>\r\n            <h3>These pets are looking for a good home</h3>\r\n            <PetTable pet={pet} removeFromDom={removeFromDom}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\nimport {Link, navigate} from '@reach/router'\r\nimport PetTable from '../components/PetTable';\r\n\r\nexport default (props) => {\r\n    const {id} = props\r\n    const [pet, setPet] = useState([])\r\n    const [loaded, setLoaded] = useState(false);\r\n    \r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/pet/' + id)\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setPet(res.data);\r\n            setLoaded(true);\r\n        })\r\n        .catch(err => console.log(err.data))\r\n    }, []);\r\n\r\n        // const { petId, successCallback } = props;\r\n        const deleteHandler = e => {\r\n            axios.delete('http://localhost:8000/api/pet/' + id)\r\n            .then(res=>{\r\n                console.log(res)\r\n                navigate('/')\r\n                    // successCallback();\r\n                })\r\n        }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <Link to=\"/\">back to home</Link>\r\n            <button onClick={deleteHandler}>Adopt {pet.name}</button>\r\n            <h3>Details about: {pet.name}</h3>\r\n            <h2>Pet Type: {pet.type}</h2>\r\n            <h2>Description: {pet.description}</h2>\r\n            <h2>Skills: {pet.skill1}, {pet.skill2}, {pet.skill3}</h2>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { Link, navigate } from '@reach/router'\r\nimport axios from 'axios'\r\nexport default (props) => {\r\n\r\nconst [errors, setErrors] = useState([]); \r\nconst [pet, setPet] = useState([]);\r\nconst [name, setName] = useState();\r\nconst [type, setType] = useState();\r\nconst [description, setDescription] = useState();\r\nconst [skill1, setSkill1] = useState();\r\nconst [skill2, setSkill2] = useState();\r\nconst [skill3, setSkill3] = useState();\r\nconst submitHandler = (e) => {\r\n    e.preventDefault();\r\n    axios.post('http://localhost:8000/api/pet', {\r\n        name,\r\n        type,\r\n        description,\r\n        skill1,\r\n        skill2,\r\n        skill3,\r\n    })\r\n    .catch(err=>{const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n        const errorArr = []; // Define a temp error array to push the messages in\r\n        for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n            errorArr.push(errorResponse[key].message)\r\n        }\r\n        // Set Errors\r\n        setErrors(errorArr);})\r\n}\r\nconst postManager = () => {\r\n    \r\n}\r\n    return(\r\n        <div>\r\n            <form onSubmit={submitHandler}>\r\n                {errors.map((err, index) => <p key={index}>{err}</p>)}\r\n                <label>Pet Name:</label><br/>\r\n                <input type=\"text\" name=\"name\" value={name} onChange={(e) => { setName(e.target.value) }}></input><br/>\r\n                <label>Pet Type:</label><br/>\r\n                <input type=\"text\" name=\"type\" value={type} onChange={(e) => { setType(e.target.value) }}></input><br/>\r\n                <label>Pet Description:</label><br/>\r\n                <input type=\"text\" name=\"description\" value={description} onChange={(e) => { setDescription(e.target.value) }}></input><br/>\r\n                <label>Skill 1:</label><br/>\r\n                <input type=\"text\" name=\"skill1\" value={skill1} onChange={(e) => { setSkill1(e.target.value) }}></input><br/>\r\n                <label>Skill 2:</label><br/>\r\n                <input type=\"text\" name=\"skill2\" value={skill2} onChange={(e) => { setSkill2(e.target.value) }}></input><br/>\r\n                <label>Skill 3:</label><br/>\r\n                <input type=\"text\" name=\"skill3\" value={skill3} onChange={(e) => { setSkill3(e.target.value) }}></input><br/>\r\n                <input type=\"submit\" value=\"Add Pet\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Link} from '@reach/router'\r\nimport axios from 'axios'\r\nimport PetAddFields from '../components/PetAddFields'\r\n\r\nexport default (props) => {\r\n    const {id} = props\r\n    const [author, setAuthor] = useState([]);\r\n    // useEffect(() => {\r\n    //     axios.post('http://localhost:8000/api/author/' + id)\r\n    //         .then(res => setAuthor(res.data));\r\n    // }, [])\r\n    const createAuthor = authorIterator => {\r\n        axios.post('http://localhost:8000/api/author', authorIterator)\r\n            .then( res=>{\r\n                setAuthor([...author, res.data])\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <Link to=\"/\">back to home</Link>\r\n            <h3>Know a pet needing a home?</h3>\r\n            <PetAddFields />\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { Link, navigate } from '@reach/router'\r\nimport axios from 'axios'\r\nexport default (props) => {\r\nconst {id} = props\r\nconst [errors, setErrors] = useState([]); \r\nconst [name, setName] = useState();\r\nconst [type, setType] = useState();\r\nconst [description, setDescription] = useState();\r\nconst [skill1, setSkill1] = useState();\r\nconst [skill2, setSkill2] = useState();\r\nconst [skill3, setSkill3] = useState();\r\nuseEffect(() => {\r\n    axios.get('http://localhost:8000/api/pet/' + id)\r\n        .then(res => {\r\n            setName(res.data.name);\r\n            setType(res.data.type);\r\n            setDescription(res.data.description);\r\n            setSkill1(res.data.skill1);\r\n            setSkill2(res.data.skill2);\r\n            setSkill3(res.data.skill3);\r\n        })\r\n}, [])\r\n\r\nconst updatePet = e => {\r\n    e.preventDefault();\r\n    axios.put('http://localhost:8000/api/pet/' + id + '/edit', {name:name, type:type, description:description, skill1:skill1, skill2:skill2, skill3:skill3})\r\n        .then(res => {\r\n            console.log(res)\r\n            navigate('/')\r\n        })\r\n        .catch(err=>{const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n            const errorArr = []; // Define a temp error array to push the messages in\r\n            for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                errorArr.push(errorResponse[key].message)\r\n            }\r\n            // Set Errors\r\n            setErrors(errorArr);})\r\n\r\n}\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={(e) => { updatePet(e)}}>\r\n                {errors.map((err, index) => <p key={index}>{err}</p>)}\r\n                <label>Name:</label><br/>\r\n                <input type=\"text\" name=\"name\" value={name} onChange={(e) => { setName(e.target.value) }}></input><br/>\r\n                <label>Pet Type:</label><br/>\r\n                <input type=\"text\" name=\"type\" value={type} onChange={(e) => { setType(e.target.value) }}></input><br/>\r\n                <label>Pet Description:</label><br/>\r\n                <input type=\"text\" name=\"description\" value={description} onChange={(e) => { setDescription(e.target.value) }}></input><br/>\r\n                <label>Skill 1:</label><br/>\r\n                <input type=\"text\" name=\"skill1\" value={skill1} onChange={(e) => { setSkill1(e.target.value) }}></input><br/>\r\n                <label>Skill 2:</label><br/>\r\n                <input type=\"text\" name=\"skill2\" value={skill2} onChange={(e) => { setSkill2(e.target.value) }}></input><br/>\r\n                <label>Skill 3:</label><br/>\r\n                <input type=\"text\" name=\"skill3\" value={skill3} onChange={(e) => { setSkill3(e.target.value) }}></input><br/>\r\n                <input type=\"submit\" value=\"Edit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Link} from '@reach/router'\r\nimport axios from 'axios'\r\nimport PetEditFields from '../components/PetEditFields'\r\n\r\nexport default (props) => {\r\n    const {id} = props\r\n    const [author, setAuthor] = useState([]);\r\n    // useEffect(() => {\r\n    //     axios.post('http://localhost:8000/api/author/' + id)\r\n    //         .then(res => setAuthor(res.data));\r\n    // }, [])\r\n    const createAuthor = authorIterator => {\r\n        axios.post('http://localhost:8000/api/author', authorIterator)\r\n            .then( res=>{\r\n                setAuthor([...author, res.data])\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Pet Shelter</h1>\r\n            <Link to=\"/\">back to home</Link>\r\n            <h3>Know a pet needing a home?</h3>\r\n            <PetEditFields id={id} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Router} from '@reach/router'\nimport Home from './views/Home'\nimport PetDetails from './views/PetDetails'\nimport NewPet from './views/NewPet'\nimport EditPet from './views/EditPet'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Home path=\"/\" />\n        <PetDetails path=\"/pets/:id\" />\n        <NewPet path=\"/pets/new\" />\n        <EditPet path=\"/pets/:id/edit\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}